// HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Faz Tudo</title>
    <link rel="stylesheet" href="style.css"/>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.2/css/all.min.css"
      integrity="sha512-1sCRPdkRXhBV2PBLUdRb4tMg1w2YPf37qatUFeS7zlBy7jJI8Lf4VHwWfZZfpXtYSLy85pkm9GaYVYMfw5BC1A=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <script src="script.js" defer></script> 
</head>
<body>
    <div class="todo-container">
        <header>
          <h1>Todo Avançado</h1>
        </header>
        <form id="todo-form">
          <p>Adicione sua tarefa</p>
          <div class="form-control">
            <input
              type="text"
              id="todo-input"
              placeholder="O que você vai fazer?"
            />
            <button type="submit">
              <i class="fa-thin fa-plus"></i>
            </button>
          </div>
        </form>
        <form id="edit-form" class="hide">
            <p>Edite sua tarefa</p>
            <div class="form-control">
                <input type="text" id="edit-input"/>
                <button type="submit">

                </button>
            </div>
            <button id="cancel-edit-btn">Cancelar</button>
        </form>
        <div id="toolbar">
            <div id="search">
              <h4>Pesquisar:</h4>
              <form>
                <input type="text" id="search-input" placeholder="Buscar..." />
                <button id="erase-button">
                  <i class="fa-solid fa-delete-left"></i>
                </button>
              </form>
            </div>
            <div id="filter">
                <h4>Filtrar:</h4>
                <select id="filter-select">
                  <option value="all">Todos</option>
                  <option value="done">Feitos</option>
                  <option value="todo">A fazer</option>
                </select>
              </div>
            </div>
            <div id="todo-list">
              <!-- 
                Template

                <div class="todo">
          <h3>Estou fazendo algo aqui...</h3>
          <button class="finish-todo">
            <i class="fa-solid fa-check"></i>
          </button>
          <button class="edit-todo">
            <i class="fa-solid fa-pen"></i>
          </button>
          <button class="remove-todo">
            <i class="fa-solid fa-xmark"></i>
          </button>
        </div> -->
      </div>
    </div>
  </body>
</html>
          
</body>
</html>




// CSS
/* Geral */
* {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
    font-family: Verdana;
    color: #000000;
}

body {
    background-image: url(imengs/9987fdbf87f0814128747838bec0211f.jpeg);
    background-position: center;
    background-size: cover; 
}

button {
    background-color: rgb(139, 120, 120);
    color: #271414;
  border: 2px solid #000000;
  padding: 0.3rem 0.6rem;
  font-size: 1rem;
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
  transition: 0.4s;
}

button:hover {
    background-color: #102f5e;
  }
  
  button:hover > i {
    color: #a03397;
  }
  
  button i {
    pointer-events: none;
    color: #0e0606;
    font-weight: bold;
  }
  
  input,
  select {
    padding: 0.25rem 0.5rem;
  }
  
  .hide {
    display: none;
  }

  /* Todo Header */
.todo-container {
    max-width: 450px;
    margin: 3rem auto 0;
    background-color: #580d46;
    padding: 1.5rem;
    border-radius: 15px;
  }
  
  .todo-container header {
    text-align: center;
    padding: 0 1rem 1rem;
    border-bottom: 1px solid #ccc;
  }
  
  /* Todo Form */
  #todo-form,
  #edit-form {
    padding: 1rem;
    border-bottom: 1px solid #ccc;
  }
  
  #todo-form p,
  #edit-form p {
    margin-bottom: 0.5rem;
    font-weight: bold;
  }
  
  .form-control {
    display: flex;
  }
  
  .form-control input {
    margin-right: 0.3rem;
  }
  
  #cancel-edit-btn {
    margin-top: 1rem;
    color: #4a35a8;
  }
  
  /* Todo Toolbar */
  #toolbar {
    padding: 1rem;
    border-bottom: 1px solid #ccc;
    display: flex;
  }
  
  #toolbar h4 {
    margin-bottom: 0.5rem;
  }
  
  #search {
    border-right: 1px solid #ddd;
    padding-right: 1rem;
    margin-right: 1rem;
    width: 65%;
    display: flex;
    flex-direction: column;
  }
  
  #search form {
    display: flex;
  }
  
  #search input {
    width: 100%;
    margin-right: 0.3rem;
  }
  
  #filter {
    width: 35%;
    display: flex;
    flex-direction: column;
  }
  
  #filter select {
    flex: 1;
  }
  
  /* Todo List */
  .todo {
    display: flex;
    justify-content: space-around;
    align-items: center;
    padding: 1rem 1rem;
    border-bottom: 1px solid #ddd;
    transition: 0.3s;
  }
  
  .todo h3 {
    flex: 1;
    font-size: 0.9rem;
  }
  
  .todo button {
    margin-left: 0.4rem;
  }
  
  .done {
    background: #395169;
  }
  
  .done h3 {
    color: #fff;
    text-decoration: line-through;
    font-style: italic;
  }





// JAVASCRIPTY
// js comentado

// Seleção de elementos
const todoForm = document.querySelector("#todo-form");
const todoInput = document.querySelector("#todo-input");
const todoList = document.querySelector("#todo-list");
const editForm = document.querySelector("#edit-form");
const editInput = document.querySelector("#edit-input");
const cancelEditBtn = document.querySelector("#cancel-edit-btn");
const searchInput = document.querySelector("#search-input");
const eraseBtn = document.querySelector("#erase-button");
const filterBtn = document.querySelector("#filter-select");

let oldInputValue;

// Função para salvar uma nova tarefa
const saveTodo = (text, done = 0, save = 1) => {
  const todo = document.createElement("div");
  todo.classList.add("todo");

  const todoTitle = document.createElement("h3");
  todoTitle.innerText = text;
  todo.appendChild(todoTitle);

  const doneBtn = document.createElement("button");
  doneBtn.classList.add("finish-todo");
  doneBtn.innerHTML = '<i class="fa-solid fa-check"></i>';
  todo.appendChild(doneBtn);

  const editBtn = document.createElement("button");
  editBtn.classList.add("edit-todo");
  editBtn.innerHTML = '<i class="fa-solid fa-pen"></i>';
  todo.appendChild(editBtn);

  const deleteBtn = document.createElement("button");
  deleteBtn.classList.add("remove-todo");
  deleteBtn.innerHTML = '<i class="fa-solid fa-xmark"></i>';
  todo.appendChild(deleteBtn);

  if (done) {
    todo.classList.add("done");
  }

  if (save) {
    saveTodoLocalStorage({ text, done: 0 });
  }


  todoList.appendChild(todo);
  todoInput.value = "";
};

// Função para alternar a visibilidade dos formulários de adicionar e editar tarefas
const toggleForms = () => {
  editForm.classList.toggle("hide");
  todoForm.classList.toggle("hide");
  todoList.classList.toggle("hide");
};

// Função para atualizar uma tarefa existente
const updateTodo = (text) => {
  const todos = document.querySelectorAll(".todo");
  todos.forEach((todo) => {
    let todoTitle = todo.querySelector("h3");
    if (todoTitle.innerText === oldInputValue) {
      todoTitle.innerText = text;
      updateTodoLocalStorage(oldInputValue, text);
    }
  });
};

// Função para filtrar tarefas com base no texto de pesquisa
const getSearchedTodos = (search) => {
  const todos = document.querySelectorAll(".todo");
  todos.forEach((todo) => {
    const todoTitle = todo.querySelector("h3").innerText.toLowerCase();
    todo.style.display = "flex";
    if (!todoTitle.includes(search)) {
      todo.style.display = "none";
    }
  });
};

// Função para filtrar tarefas com base no status (todas, concluídas ou pendentes)
const filterTodos = (filterValue) => {
  const todos = document.querySelectorAll(".todo");
  switch (filterValue) {
    case "all":
      todos.forEach((todo) => (todo.style.display = "flex"));
      break;
    case "done":
      todos.forEach((todo) =>
        todo.classList.contains("done")
          ? (todo.style.display = "flex")
          : (todo.style.display = "none")
      );
      break;
    case "todo":
      todos.forEach((todo) =>
        !todo.classList.contains("done")
          ? (todo.style.display = "flex")
          : (todo.style.display = "none")
      );
      break;
    default:
      break;
  }
};

// Evento para adicionar uma nova tarefa ao submeter o formulário
todoForm.addEventListener("submit", (e) => {
  e.preventDefault();
  const inputValue = todoInput.value;
  if (inputValue) {
    saveTodo(inputValue);
  }
});

// Evento para manipular cliques nos botões de concluir, remover e editar tarefas
document.addEventListener("click", (e) => {
  const targetEl = e.target;
  const parentEl = targetEl.closest("div");
  let todoTitle;
  if (parentEl && parentEl.querySelector("h3")) {
    todoTitle = parentEl.querySelector("h3").innerText || "";
  }
  if (targetEl.classList.contains("finish-todo")) {
    parentEl.classList.toggle("done");
    updateTodoStatusLocalStorage(todoTitle);
  }
  if (targetEl.classList.contains("remove-todo")) {
    parentEl.remove();
    removeTodoLocalStorage(todoTitle);
  }
  if (targetEl.classList.contains("edit-todo")) {
    toggleForms();
    editInput.value = todoTitle;
    oldInputValue = todoTitle;
  }
});

// Evento para cancelar a edição de uma tarefa
cancelEditBtn.addEventListener("click", (e) => {
  e.preventDefault();
  toggleForms();
});

// Evento para atualizar uma tarefa ao submeter o formulário de edição
editForm.addEventListener("submit", (e) => {
  e.preventDefault();
  const editInputValue = editInput.value;
  if (editInputValue) {
    updateTodo(editInputValue);
  }
  toggleForms();
});

// Evento para filtrar tarefas conforme o usuário digita no campo de pesquisa
searchInput.addEventListener("keyup", (e) => {
  const search = e.target.value;
  getSearchedTodos(search);
});

// Evento para limpar o campo de pesquisa e refazer a pesquisa
eraseBtn.addEventListener("click", (e) => {
  e.preventDefault();
  searchInput.value = "";
  searchInput.dispatchEvent(new Event("keyup"));
});

// Evento para filtrar tarefas com base no filtro selecionado
filterBtn.addEventListener("change", (e) => {
  const filterValue = e.target.value;
  filterTodos(filterValue);
});

// Função para obter as tarefas armazenadas no localStorage
const getTodosLocalStorage = () => {
  const todos = JSON.parse(localStorage.getItem("todos")) || [];
  return todos;
};

// Função para salvar uma nova tarefa no localStorage
const saveTodoLocalStorage = (todo) => {
  const todos = getTodosLocalStorage();
  todos.push(todo);
  localStorage.setItem("todos", JSON.stringify(todos));
};

// Função para remover uma tarefa do localStorage
const removeTodoLocalStorage = (todoText) => {
  const todos = getTodosLocalStorage();
  const filteredTodos = todos.filter((todo) => todo.text != todoText);
  localStorage.setItem("todos", JSON.stringify(filteredTodos));
};

// Função para atualizar o status de uma tarefa no localStorage
const updateTodoStatusLocalStorage = (todoText) => {
  const todos = getTodosLocalStorage();
  todos.map((todo) =>
    todo.text === todoText ? (todo.done = !todo.done) : null
  );
  localStorage.setItem("todos", JSON.stringify(todos));
};

// Função para atualizar o texto de uma tarefa no localStorage
const updateTodoLocalStorage = (todoOldText, todoNewText) => {
  const todos = getTodosLocalStorage();
  todos.map((todo) =>
    todo.text === todoOldText ? (todo.text = todoNewText) : null
  );
  localStorage.setItem("todos", JSON.stringify(todos));
};

// Carrega as tarefas armazenadas no localStorage ao iniciar o aplicativo
const loadTodos = () => {
  const todos = getTodosLocalStorage();
  todos.forEach((todo) => {
    saveTodo(todo.text, todo.done, 0);
  });
};

loadTodos();



